<File version="3.2">
  <FileID>ce5c30f6-6db2-40f2-a713-ec30fb04d9b5</FileID>
  <Preview>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
RU5ErkJggg==</Preview>
  <Form>gsN21wbA4g4AACODCAAAAAAABADVV12P2jAQfK/U/2DlOSIQvnoSRCppTzr1rkWEXh9PSdgTLiZGttNCf33X
CZRAIDE9UfWEFJHgyezuzK7N4Ev0HWIlvbdvCBnkN0RtVjC0go1UsGx8o8mM/5SNWy6W+dUmp36y
ySMISXky7DSa+mMTP2UqFTBMIFUiZDYZpxGj8SfYTPkCkmHU74fduNtr3bQ70Hx3Y5EkXCLzM77P
n9NwyjmL+Noi8ZyymUCE5fNECc6klQWMIY8FX4FQmy30fap4EIcMPtAlJDocXNqzSas9cHZL66AP
fAaWd4tMtRifUUhUQH8hoNPt2qRjQPQZr5Z3lGQtKlChUGMuqcKkLM9HXhBBLACSWuwU1gohVWwf
f+ALt8vveTgrBfiknw6cbN0OVO+XCY3nmn3E11e3jUAuhVwYbKvKM+X63PM4zMvacm3S7ZXKc07E
IqUBaGuUdgsN2ewbAKZhdJfMYG15btlX53Qui+vkQpnLNkqV4snVFVsxruI5xIuXyOWaFDKX6w+f
sVZ97Gmz0u+Vco2V8nUsZIxRSQPMVwmPVKYhC9SGwSiMFz5nXFjeVKRggEcwjZgebSGTJwHFIYCj
DXXZl+wpe3A0AC421gMkaaAEXV3dWzj+U6mZ/noWILnbMfbWns98EOgdw4ii4K6msbsqInoVwrmX
CXeHQRV+xgX6SVVOemfLctLJ6cXXy60QFgY2gWfArGIozMFsFpQisohTzMjRz15lihGOq3Q1Aam4
gMvSNDD8QdOadMhRz5qM7Bf0rMlIOOrZckQHPXt4U9++/9AH9Z6uPBefx9UfkfMtG4/7J6bk6Xrr
vZf4J44E/3+BazqqssjVWMNCt5ruBZUeZZTOlrP6D8j27FEdZflAUtBs91V6vwFO2hJp4g4AAA==</Form>
  <Code><![CDATA[
$formChiaToolbox_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $formChiaToolbox -Theme Dark
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formChiaToolbox -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formChiaToolbox -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-ToolStripComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ToolStripComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ToolStripComboBox control.
	
	.PARAMETER ToolStripComboBox
		The ToolStripComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ToolStripComboBox's Items collection.
	
	.PARAMETER Append
		Adds the item(s) to the ToolStripComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "White" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "Blue" -Append
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ToolStripComboBox]
		$ToolStripComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ToolStripComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ToolStripComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ToolStripComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ToolStripComboBox.Items.Add($obj)
		}
		$ToolStripComboBox.EndUpdate()
	}
	else
	{
		$ToolStripComboBox.Items.Add($Items)
	}
}


#endregion

##Function source: https://github.com/MrPig91/PSChiaPlotter/blob/main/PSChiaPlotter/Public/Test-ChiaPlot.ps1##
function Test-ChiaPlot
{
	[CmdletBinding()]
	param (
		[Parameter(ValueFromPipelineByPropertyName, ValueFromPipeline)]
		[Alias("FilePath", "FullName", "Filter")]
		[ValidateNotNullOrEmpty()]
		[string[]]$Path,
		[ALias("n")]
		[int]$Challenges = 30
	)
	
	Begin
	{
		$ChiaPath = (Get-Item -Path "$ENV:LOCALAPPDATA\chia-blockchain\app-*\resources\app.asar.unpacked\daemon").FullName
		if ($ENV:Path.Split(";") -notcontains $ChiaPath)
		{
			$ENV:Path += ";$ChiaPath"
		}
		$Proofs = "Proofs ([0-9]*) / ([0-9]*), ([0-9.]*)"
		$Testing = "Testing plot"
		$ErrorString = "ERROR"
	}
	
	Process
	{
		foreach ($plotpath in $Path)
		{
			chia.exe plots check -n $Challenges -g $plotpath 2>&1 | Select-String -SimpleMatch "Proofs", "Error", "Testing" | foreach {
				switch -Regex ($_)
				{
					$Proofs {
						$PlotObject.ProofsFound = $Matches[1] -as [int]
						$PlotObject.Ratio = $Matches[3] -as [double]
						$PlotObject
						break
					}
					$Testing {
						$PlotPath = ($_ -split "Testing plot ")[1].split(' ')[0]
						$Leaf = Split-Path -Path $PlotPath -Leaf
						$KSize = $Leaf -split "plot-k" -split "-" | Select-Object -First 1 -Skip 1
						$PlotId = ($Leaf -split "-" | select -Last 1).Split(".")[0]
						$PlotObject = [PSCustomObject]@{
							PSTypeName  = "PSChiaPlotter.PlotTest"
							Path	    = $PlotPath
							ProofsFound = 0
							Challenges  = $Challenges
							Ratio	    = 0.0
							KSize	    = $KSize
							PlotId	    = $PlotId
							Errors	    = New-Object System.Collections.Generic.List[string]
						}
						break
					}
					$ErrorString {
						$PlotObject.Errors.Add($_.ToString())
						break
					}
				} #switch
			} #foreach line
		} #foreach
	} #process
}

$text = $buttonTest.Text
$buttonRefreshPlots_Click={
	#TODO: Place custom script here
	$richtextbox1.Text = Import-Csv D:\Redstone\plotcheck.csv -Header "Path", "ProofsFound", "Challenges", "Ratio", "KSize", "PlotId", "Errors" | Out-String
	
}

$backupRestoreToolStripMenuItem_Click={
	#TODO: Place custom script here
	$plotcheck.Visible = $true
	
}

$plotcheck_Click={
	$richtextbox1.Text += "Checking plots may take up to 30s per plot, please be patient whilst this happens in the background"
	$farm = Read-Host -prompt 'Please enter your farm path'
	Test-ChiaPlot -Path $farm | Export-Csv -Path .\plotcheck.csv -NoTypeInformation -Append
	
	$richtextbox1.Text += "Installing Excel Module"
	Install-Module importexcel
	
	$richtextbox1.Text += "Converting .csv to .xlsx"
	Import-CSV .\plotcheck.csv | Export-Excel .\plotcheck.xlsx
	
	Add-Type -AssemblyName PresentationCore, PresentationFramework
	$ButtonType = [System.Windows.MessageBoxButton]::YesNo
	$MessageIcon = [System.Windows.MessageBoxImage]::Information
	$MessageBody = "The checking process has finished"
	$MessageTitle = "Completed"
	
	[System.Windows.MessageBox]::Show($MessageBody, $MessageTitle, $ButtonType, $MessageIcon)
	
	Remove-Module importexcel
}
]]></Code>
  <Bookmarks>
    <Line>867</Line>
    <Line>871</Line>
    <Line>874</Line>
  </Bookmarks>
  <BreakPoints />
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>