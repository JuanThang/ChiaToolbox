<File version="3.2">
  <FileID>ce5c30f6-6db2-40f2-a713-ec30fb04d9b5</FileID>
  <Preview>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
IgZQCgAiImIApQAgIiIGUAoAIiJiAKUAICIiBlAKACIiYgClACAiIgZQCgAiImIApQAgIiIGUAoA
IiJiAKUAICIiBlAKACIiYgClACAiIgZQCgAiImIApQAgIiIGUAoAIiJiAKUAICIiBlAKACIiYgCl
ACAiIgZQCgAiImIApQAgIiIGUAoAIiJiAKUAICIiBlAKACIiYgClACAiIgZQCgAiImIApQAgIiIG
UAoAIiJiAKUAICIiBlAKACIiYgClACAiIgZQCgAiImIApQAgIiIGUAoAIiJiAKUAICIiBlAKACIi
YgClACAiIgZQCgAiImIApQAgIiIGUAoAIiJiAKUAICIiBlAKACIiYgClACAiIgZQCgAiImIApQAg
IiIGUAoAIiJiAKUAICIiBlAKACIiYgClACAiIgZQCgAiImIApQAgIiIGUAoAIiJiAKUAICIiBlAK
ACIiYgClACAiIgZQCgAiImIApQAgIiIGUAoAIiJiAKUAICIiBlAKACIiYgClACAiIgZQCgAiImIA
pQAgIiIGUAoAIiJiAKUAICIiBlAKACIiYgClACAiIgZQCgAiImIApQAgIiIGUAoAIiJiAKUAICIi
BlAKACIiYgClACAiIgZQCgAiImIApQAgIiIGUAoAIiJiAKUAICIiBlAKACIiYgClACAiIgZQCgAi
ImIApQAgIiIGUAoAIiJiAKUAICIiBlAKACIiYgClACAi4nVxYGBAg4ODOA/ta+Z6Lf2QAoCIiO9b
G2Tnzp1TR0eH2tvb8T3Y2dmp3t7em1YCKACIiPi+tWFWWVmpwsJC5efn47uYl5en4uJiNTQ0qKen
x/ma3mgpAIiIeM3a2WtXV5cXZhUVFd5egKGhIXwX7e5/W5pKS0u94mT3BLhe3xspBQAREa9JG/42
uGpqalRdXW1+v/dpamoK36OTk5NeCSgrK1N9fb33evr5cQAFABERr0k7i+3u7vZ2+9u9ALOhNjEx
ge/B2dersbHR2xNgX1MKACIifuC1BcAGv/08234/PT3tDDq8spbW1lYVFRV5ryEFABERP/DOFgB7
UJv9/v0WgEmjpkKhOHVBzmX81tum6ZltMk5MXN89HBcuXFBLSwsFABERbx2vZwGwQTs6OaWG/jFV
Z2RpsK1OU6YMvJfAnTZaTGeYCWwb1eZr0yJcy79XZ8vIuWmpeF+LeiobzTYNm8emLlv2WqUAICLi
Lef1LADTkxMaMrl9smFYexY+oZaUYzbCzWNXD9tJ87w+UxIaG1rVU12ukclxtfQMqa2kRKODPTPH
JMxv1m5LhP18vnVwTJvSanT/sm167n+/R3UHdpttGjDLvL9icakUAEREvOW8EQUgsnFYB594Rl1Z
p73Zt8V+HDBpQvyCmdmbybgmJkOlwD7HTPdVZv7duztKZaue14gpDcdLehSz+EkNt5V5ewWmTInQ
hdBeAYs3hh1vajJ0xyXYxyYnp71gTm4b0ccWH9Nff/RTevLf/me1nlpvHh01z6UAXAYFABExON6I
AhBlCsCBp55VWfxR1TTUq76yVKMDLRo3yTwwPKLB7m6Nj5mYN8sPj0+qt/+80lpbtea1NTq8+BHl
dTZqd2y8Nv76V2rKOqzpiX5TIEzI9o+quKpBteXFGu6p18SFaQ2Ojquvt1vt5/pVXlWrmhLzWHuD
mf2PmG2a1Pj4hHrGJpRc36W1H9mo6gMRpgD0mscoAJdBAUBEDI7XuwAMmwIQ0zSi1Yue13MrXtDf
f+f7uv3v/lrZx36i7ql2RWTV6uyy53W+u8Kbq+cMSMs2pOi1R76te7745/qLv/mSvrR0uZ78zYf1
8f/477X9d/+PxlvOqHj8gu7cn6sP3/ZD/fP/92FFb/oXDUyWKaauT+ufeklPv75L/+tr39GX/urD
in3gB5rqztDE9AVdmAztISjsn9T6j+5V9f5TFIArQQFARAyO17sAjJh4jawb0cP/6znte/IR5RZF
6NVjGXpt7W+UH/cLHUiu1OlHH9H5jmKZeFZSn7ThhY1KWPOQTq78o7Y8+piSGqq089QJrfz5z1Sf
skPnx3r1vZ2l+snr65SRvFObIjP03PqnVBj1de1Lr9ODf/OEjr/6tHILorXudIZWL35FFXtXmXox
bLZpSqNmPdmdw1r333aYAnCSAnAlKACIiMHxuu8BmDYFoOG81v/8WdWd3GnCdlJFF0zI7zio5Dd+
rpy0QzqzZJGGO8u9ApBiCsDB5atUdvhVFZ9co/I1r2rM3H+yvF/xTz+rke5qFU5Izz6zSQl715nx
BtVo/t1wKlOxL9ylvIwj2v3zx9SWdtzcKxUZt6w5pJyVy80o5uehAFAAEBHxcm/IMQBNwzq+/Fl1
FsR6oVxrPLQ/RYnLnlZN2kqdfX6hhrqrTCxLaf3S/hfXqnD/CuUcelVZr6/QOY3oWH6TTi96XH1N
+To7bErFc8vVdWqHN16r8Xh8haKfeFpN2euU+PxD6q7OMfdeUP6otGfdHuWtfdl8N0ABoAAgIqLL
614ATKpH1g9r6zefVd9xuwdAShmTXtm0Vpnbb1fq2SQd/+IyqSPfeyy6T9q2dKUK961Q8f7lqjDB
PWDuP5bboqTHH9HkcK3qzfc/e/aQdm5eab5qVaX596UjZ3T2lX9Sam6sTj+5RN1lKebeKeWNSLvX
UgCsFABERLyi17sAnDfxGlF9Xov+/eNa+KM/6KmVz+mhR5/SrjV3qLPuFWWWjemhrx3R4nvu0J6n
HtHK7Ue0dsHjqjjykrZGHtD931ug7M2vaW95iX72m2WKeHiBhusztDCxXV95bY+eWm7GfewprXvj
x6rMW6wDhS06sOAxdRfHeQUgyxSALa9vVdbrz5nYf/sjgPSOYb3x5xtVseOIWa7HbC8F4DIoAIiI
wfF6FoApUwBGzfPzOka1ZcEh/eCxN3Xbz36upT+8TedSXjbBa6J3Uno5tU5fu/17WnzbF3Vo1Uol
bd9hAvyMtta36+7frlHy/b9Qam+l7lyXpvVfv1ODuYdNlEtPJzbqtp8s0gPfvk3NEQ96Bxxmtwwp
Y8cuDTSVmG2fVM3otBIjk1QTedR8P2y2aVJjZpuq+kYU9cd4taZkm/sHzfZe+885VwoAIiLecl7P
AjCrLQKhi/q+zdR06MI93mV+L7mgjz0Q0Ltwz5T5aip0v/3XztztaYJ2lAnz5Cn7vJnLA1tCFxaa
MstNzlz4J3RhIbvc9AWzvAnludtk1zR5HX6+uVIAEBHxlvNGFADvMrz2in/GC2a8qWkTxjMBbbWz
crseG9Len9M1Tpj7Qveb781j9qqB01PmPrs95n77PBv2drxpM5690t/sumaff/F78/VsIZjVu3/a
LDOz3PWUAoCIiLecswWgoKBAPT09XiC7Qg7d2rJhy0xTUxMFABERbx1tWJ07d06lpaWqr6/X+fPn
Q7NybxaN76Z9rexrWF1drZqaGudrfCOlACAi4vuytbVVhYWFamho0MjIiBdseHVtAbCvXUVFhcrK
ytTd3X3Z63qjpQAgIuI1O7vLenY3dkZGhtLS0pSeno5X0b5OmZmZKikpUXt7+8XX0U8pAIiI+L60
4WVtbm72As0eE2D3COCVtWXJzv5t+NtjKVyv642WAoCIiNdFG2TDw8PesQD47trX6maFv5UCgIiI
GEApAIiIiAGUAoCIiBhAKQCIiIgB9JYpALNHmSIiIoazrgy8EVIAEBERP0C6MvBGeEsUgOHhIZWV
Vyr6TLxiYhMQERHDziiTcampWd7llf04PfCWKADnzw8rJTVTp6JiVVFZg4iIGHZm5RTo6PFIdXR0
aGhoyJmH19NbpgAkp2QqJ68w9MecAQAAwoyBgUGdioxVezsF4KKzewAys/NmXiYAAIDwovtcDwVg
rnMLwISxc3BUXRWVmh4/7933XjCbpba6Rg23NZnvLoTuvE709EgtiV2anhgw313fsQEAIPyhADic
WwD6jCcKWnX68UXqr09Rf1OdxgZ6vccuxeS9BsamNNDapqmxYWWNSXtfXqfKvetmHn3/1PVP6HBe
jZ56eJ92/pfHNdGXa+6dDj0IAADwHqEAOHQWgMI2RT6xSC1FB5SzeaU68lO9xy5l1Hi2fkBxzz2v
keYi2Wje+/JG1e5f7z1+PXgtu08f/sFSferP/1K7P/IJTQ1mzzwCAADw3qEAOHQVgIjCVkUtXqyB
xkyd7+7U5Pmh0Ix/dEz9vb0aGxpU9wUT+IVd2rPgIXUXxahwalQH39yo0n0bNGAeH+jr1dT4oDfm
LEPjU+rtG9Cw3aNglrdz+fGJCWnM7toP7dwfGxzX1Ni4913f2LTK2nu1Z32qdn30ZY335Zv7r8/e
BQAACA4UAIeuAnCyqF1RS55Qa8kh5e9Yq4GyTKWYLP/aY2/ptv/+Ma3+/p16LbZGf/nYKf3ff/Fh
bf/V/6u2yvWK3vqWXlu2XN994FF98X98VFEbv2pGq/TGzR2SvrE9WR/97Df1q698VLVJD6rN3L8r
Nk05b31FkxN1yuk339++SfUHj5pHQscf2FIQf7rLFIBtGu+lAAAAwPyhADi8WgGoz9uqs889rNr8
g4pYmqS37lyrIycOaOXCHXrpCy/ppT2b9cxPf6Cioy+rur9cK362Ra//4D7FJm3UGzsP6ak1i9V0
9htqHuzSl7fX6f4Nq3Xo6CY9s+WQ1mz4oQYLFmpPcae+9NKLykp+Wa+sSlbsU69qqCLJbMWktz2m
NyjqSIMpABsoAAAAcE1QABxerQA05O9Q8kumCBRH6sEVWfr2t36tpJj7VZ2Ro7ojRcqurVDqiqUa
76iUjeaVC7YpY9kyb5Qe8+/6hAolLfumqitOa8mTK1WeesTce0F2TWu2bFHDpl+qy+T8g2kD+td/
eUrrF3xBIy0R5tERYwgKAAAAvF8oAA7frQAkrXhCrRlxOt0/raWxR/Xq1ue0Y9nzKnjjWSWVZij6
2SUaqM32CsDR9RvVELn94jgx+W2KenyZGnPWq3LpvRopy/Ieqzce3ZuonJffNF+N63DltD70oUe0
68cfMol/xltmFgoAAAC8XygADt+1ALy4WPU5J1QdXa3upHo1msfffCtaT37m+4o7u0ZZSx/WVF+N
Csz9W+7fqrpXXzdfTajL/LsqrlQpK76iqqpoPfTkOhUlHTT3TinT/Lty8zrV7fipuoalF3Y26Bd3
Pqznf/c9tRetlqa7zRIhKAAAAPB+oQA4nFsA7Bn/R/NbFbHwQdXlbNTZZx9Uff4h7ViRrke+sEZb
N72p11dv0vp1+3UoO1mPPrhcZ1YsVW5tll774mot/cy9Wn9irV5ctV4vr3xIrak/VdtQj76+t0n3
rFmj9Vte0zOvr9eeTT9SbdGz2pZYrvVLHtS5+tNal9xsSsTz6kywBwHa6JfseQQR++q05T+t0nhP
jvmOAgAAAPODAuBwbgGwsZtac04ZG9epvSpSBTvXqa8sS/Wj0n3PpOtTn/yRfv39f9BY5XbljU/r
q2tyteKzX1PlmVU69dJh3XHXK/rkr36tu//xkyrfcacZLXQqYJl5/h17M/XJ2+7Qkm9+UiOZy1Q+
Jr0VGaWmyO96y9lrCL7143gVbTthvuqwT/OOBshIbFf0D49rYrDKfMeFgAAAYH5QABzOLQAWe+rd
hQvev6Fb+6VhytyOj09qctJeMDgUxJPmvil7Lv/0lLfs5NS0xifNMhPj5r7Qkfyz2GXHJybN8vY8
/2lv2OlpO87by9mnXJi2j1hDeJvg3QcAADB/KAAOXQUAAAAgnKAAOKQAAABAuEMBcEgBAACAcIcC
4JACAAAA4Q4FwCEFAAAAwh0KgEMKAAAAhDsUAIcUAAAACHcoAA4pAAAAEO5QABxSAAAAINyhADik
AAAAQLhDAXBIAQAAgHCHAuCQAgAAAOEOBcAhBQAAAMIdCoBDCgAAAIQ7FACHFAAAAAh3KAAOKQAA
ABDuUAAcUgAAACDcoQA4pAAAAEC4QwFwSAEAAIBwhwLgkAIAAADhDgXAIQUAAADCHQqAQwoAAACE
OxQAhxQAAAAIdygADikAAAAQ7lAAHFIAAAAg3KEAOKQAAABAuEMBcEgBAACAcIcC4JACAAAA4Q4F
wCEFAAAAwh0KgEMKAAAAhDsUAIcUAAAACHcoAA4pAAAAEO5QABxSAAAAINyhADikAAAAQLhDAXBI
AQAAgHCHAuCQAgAAAOEOBcAhBQAAAMIdCoBDCgAAAIQ7FACHFAAAAAh3KAAOKQAAABDuUAAcUgAA
ACDcoQA4pAAAAEC4QwFwSAEAAIBwhwLgkAIAAADhDgXAIQUAAADCHQqAQwoAAACEOxQAhxQAAAAI
dygADikAAAAQ7lAAHFIAAAAg3KEAOKQAAABAuEMBcEgBAACAcIcC4JACAAAA4Q4FwCEFAAAAwh0K
gEMKAAAAhDsUAIcUAAAACHcoAA4pAAAAEO5QABxSAAAAINyhADikAAAAQLhDAXBIAQAAgHCHAuCQ
AgAAAOEOBcAhBQAAAMIdCoBDCgAAAIQ7FACHFAAAAAh3KAAOKQAAABDuUAAcUgAAACDcoQA4pAAA
AEC4QwFwSAEAAIBwhwLgkAIAAADhDgXAIQUAAADCHQqAQwoAAACEOxQAhxQAAAAIdygADikAAAAQ
7lAAHFIAAAAg3KEAOKQAAABAuEMBcEgBAACAcIcC4JACAAAA4Q4FwCEFAAAAwh0KgEMKAAAAhDsU
AIcUAAAACHcoAA4pAAAAEO5QABxSAAAAINyhADikAAAAQLhDAXBIAQAAgHCHAuCQAgAAAOEOBcAh
BQAAAMIdCoBDCgAAAIQ7FACHFAAAAAh3KAAOKQAAABDuUAAcUgAAACDcoQA4pAAAAEC4QwFwSAEA
AIBwhwLgkAIAAADhDgXAIQUAAADCHQqAQwoAAACEOxQAhxQAAAAIdygADikAAAAQ7lAAHFIAAAAg
3KEAOKQAAABAuEMBcEgBAACAcIcC4JACAAAA4Q4FwCEFAAAAwh0KgEMKAAAAhDsUAIcUAAAACHco
AA4pAAAAEO5QABxSAAAAINyhADikAAAAQLhDAXBIAQAAgHCHAuCQAgAAAOEOBcAhBQAAAMIdCoBD
CgAAAIQ7FACHFAAAAAh3KAAOKQAAABDuUAAcUgAAACDcoQA4pAAAAEC4QwFwSAEAAIBwhwLgkAIA
AADhDgXAIQUAAADCHQqAQ1sAklMylZNXOPMyAQAAhBcDA4MUgLnO7gGIjD6rmtp6RETEsDM3v0jH
jkeqo4MCcNHh4SGVllWYAhCn6Jh4RETEsNNOcpOTM3Tu3DkNDg468/B6eksUAERExCBoQ9l1/43w
likAAwMDphEZ7S0iImK4aTLOZp0rA2+E7AFAREQMoBQARETEAEoBQEREDKAUAERExABKAUBERAyg
FABERMQASgFAREQMoBQARETEAEoBQEREDKAUAERExABKAUBERAygFABERMQASgFAREQMoBQARETE
AEoBQEREDKAUAERExABKAUBERAygFABERMQASgFAREQMoBQARETEAEoBQEREDKAUAERExABKAUBE
RAygFABERMQASgFAREQMoBQARETEAEoBQEREDKAUAERExABKAUBERAygFABERMQASgFAREQMoBQA
RETEAEoBQEREDKAUAERExABKAUBERAygvhcAu9JBs1K7YkRERLw5Dg72q9dksm8F4FyvWaFpHLZ1
ICIi4s3Rhn+3yeQbXgBmtStCRETED4aurL4hBcDej4iIiB8Mr5TV170AICIi4gdbCgAiImIApQAg
IiIG0GsuAM2mAJQ0hQZARETEW0ub4e3zKgB33d1b39yp4WmpfeCC1x4QERHx1tJm+JikotKq91YA
vv/9H0zGnk1WYXGF1xoQERHx1rSopEonTkbp9ttvb5+J+Svz9a9/Pffb3/52tW0LiIiIeGv7ne98
p9pke+xMzAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAB8gPjQh/5/gkQeShUt8XYAAAAASUVORK5CYII=</Preview>
  <Form>VdkK1TTPCBIAACODCAAAAAAABADVV9tyqkoQfU9V/oHiNVZAvFclVgGiJl4RNdv9sovLBCYOjMIQL1+/Z8Sc
YwJR8pBTOUkVDtBNd6+1ugfuRtYLsEnUvL7iuLvkhCO7FbjnjV1EgH/7BAMHb6LbNg795Fjgsm4V
uDkII4iD+/KtyP4LnBojEofgPgAxCU1U4MaxhaDdA7spXoLg3qrVzIpdqRYbpTIQ6w2eC0yfRn6m
zyvynO1B5ITUjldxQEKMIv6QJk10HOIVCMnu6CDHBBu2iUAL+iBgSVDTaoErlu6EN9NLrgPsAL7Z
ppEu+qgIgoAYcE8dyqVygSsVixedhvTINw+lXbQ1iBmSMY4goaXwTZVGA6FhhwAEF32nYEtYHaGf
NtVe6ZOOdn1sOsd8/rD1nXC4+2Z6WQpKTAgOvl0MIXgOQeStECbROU2kkehj20wALJVKVAxSNYXI
ZzSdBs3hlEihVilwUlpxGRSZ1kPggC3fLOZJKWHUOsCd1k7afhaBOYxiExlkh4Bi2ksVIxzyzWkY
gyz/U1lQbdvL9wD8OVz7oA8hEUh+ufRhRBS8/Xa9IBrHwtuz8yONGcvCJAQGrhaYFgLO52h9qrIi
E1mlkltkb5nmFlipwWaalMfhRGLphL5O3gAEsUFCuPp2+uj8jiMWaeoBCtKXSHzwTRewYU5pTBCT
aCaSmAOvB1rTyZOpAbtyDpIpxugACcOGGX8fNCdp0cQm4BlQQGxwTJ0woFLZ8JxwWo3Arv1b/Vdk
TTPOg2Ci6ff05XAbm45D6eKbbHjSSPSYpx88vGEVsbKncBXl7taTTVuqf62PyrlH9T8gZOz0p633
/uRyF/6Hkjuvrc/epRB0A1o8hWACXe/yi1SLnrbwJvjQfT+091Kd55jh8mzjfWy7/0ldiJGXv7CL
NB/m8gm9CgzMcNeEc2U02Yi9jotl+jc0Zp42c+lKYaeyrsoL9vtcFxoeWygdR5nONFnud8aqsPUU
nV1FG6ON9tdXdDl6pYdWuFGQtd0Z7K7iiZO5J86khu90Hc/2Z7Ldaa+sQI8tfy4+tPR4YJSLvzVn
cYjcWz1OtPbs+mqkNV5uxoIwFmcLfS0rN9UV0W7E9fC1LpdfG7owkG5MPxLmCh4N5N1m3div4Vp/
bNfMVm9pF+Xey+/OgsBuF/avr4bmQnlSfsEtdDuj4TSqRk++qtQ7Hhp0S7LsVvaRNNGnm5GktyJ1
6cIeWsudObB7L05p0WjL80r0qyY62sKluU12gwdZE5dj2J5b0XxgqIqM1M78SZK83Ys2dOVOV0Li
1NW7NXmr12bjjYOG0BUDCnJZqQuPdUXuPRaHQ9W8vqpa4v6At4ba06UR676q3glHinISnMz+7GFx
+WMnebehw19Kj9jUgE0GfjJns/aYnz9Ts6fGWWQzXXICW6wwZNObavbW1aKRzn83Hj8QMlNKfyn8
fDo+GXZn+cj2+RZC+tkbaQYj2UmdpeRtGTX/Av5tSR0IEgAA</Form>
  <Code><![CDATA[
$form1_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $form1 -Theme Dark
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $form1 -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $form1 -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-ToolStripComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ToolStripComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ToolStripComboBox control.
	
	.PARAMETER ToolStripComboBox
		The ToolStripComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ToolStripComboBox's Items collection.
	
	.PARAMETER Append
		Adds the item(s) to the ToolStripComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "White" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "Blue" -Append
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ToolStripComboBox]
		$ToolStripComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ToolStripComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ToolStripComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ToolStripComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ToolStripComboBox.Items.Add($obj)
		}
		$ToolStripComboBox.EndUpdate()
	}
	else
	{
		$ToolStripComboBox.Items.Add($Items)
	}
}


#endregion

$text = $buttonTest.Text
$refreshplots_Click={
	#TODO: Place custom script here
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>