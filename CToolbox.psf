<File version="3.2">
  <FileID>ce5c30f6-6db2-40f2-a713-ec30fb04d9b5</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAACWvSURBVHhe7d1ZcF13fth5T9JV8+AqZ1LzMi95
TMV+ycOUlx5ntRPnxXFSdqbK7bjbnoqTtJ3E1tJqtVrtltxqqdXaRS1NSaSaErVyF/d9J7ETJAAS
BEmQBEkQ3DdwX3/z/x8SFEgdSbwt9WXjns+36mMQwL0HB1ct/37nXoD6JUmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJOkXuhn/29/7e93/xz/4le4//ZM/
6b733vuvuwcAGBOK2X1P96/+6j/u/spX/n53mu3ZZ/eVr3yl/zd+/dfjB489EYtXtcTW3Ueib8/R
2DpwBAAYA7btPRZd2/bG2+9+GH/w7/99/PIv/3LcGPOf3j/4lV/p/rsfPB4b+vbHus37YsWGfgBg
DFm+YUes6NwVm3YdjRmzF8Sv/dqvfv4C8LWvfa17wfLmWL9lMFZ19gMAY9XGXbFx+4F47LHHP38B
uP/+b3VvHzweK9OdVm8CAMaqlRv6Y/uBMzHxzbfuZAG4v3vn0Mlia1iT7gwAv4jWdu2+rvvG2y9i
1DFuOf6XcezsxnFunv9tH/9CSs59xKrOnbFt/3C89vrEO18A1nQNxLpuAPgFM2o+rejYEcvbd8SK
L6g4RjrWyHHX9+wpBujy9u2lt69VPk4exvm4148/UFydf5nnnheAfNzRj8+aTbtjx9Dp2haAtWUL
QDrx9Zv33Wb/J+TbfeK+APBlyEMuvZ2xuD0mTVkRk6Z+OX46ZXlMnd9czL/lbdvjnZlrio+V3fZn
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
FMgC8CnKBmNVlA3leiobzPVSNhiromwo11PZYK6XssFYFWVDuZ7KBnO93D5Mx6q0BcTQ0TPx+JTO
4lmALP/Ef+Hbc+Kr35od/+q78+LF2d1xfPjcLcPfAlCibDBWRdlQrqeywVwvZYOxKsqGcj2VDeZ6
KRuMVVE2lOupbDDXS9kwHYvyXwGcX88/cPxMvLdqR/zFy2vj335/YfzOw/Pj99Lbvxq/Pmas3xUn
Tp8rblfcxwLw6coGY1WUDeV6KhvM9VI2GKuibCjXU9lgrpeywVgVZUO5nsoGc73cPkjHujzI80Dv
3Xs8VvXsjxVdg7G6Zyi27z+RPp4/7z8GdEfKBmNVlA3leiobzPVSNhiromwo11PZYK6XssFYFWVD
uZ7KBnO9jB6ejaIY6HEt/3LAqPJi8MnbWQA+RdlgrIqyoVxPZYO5XsoGY1WUDeV6KhvM9VI2GKui
bCjXU9lgrpfRA7FqLACfoWwwVkXZUK6nssFcL2WDsSrKhnI9lQ1mfv7KloJ6KlsK6qVsKaiK0ctA
/qHAY8Nf0gKwZd9w7D6Yhuip8sEO8Iuk7CIAquL08Kk4cPRUMbstAABQEXlWDx2xAABApVgAAKCC
LAAAUEEWAACoIAsAAFSQBQAAKsgCAAAVZAEAgAqyAABABVkAAKCCLAAAUEEWAACoIAsAAFSQBQAA
KsgCAAAVZAEAgAqyAABABVkAAKCCLAAAUEEWAACoIAsAAFSQBQAAKsgCAAAVZAEAgAqyAABABVkA
AKCCLAAAUEEWAACoIAsAAFSQBQAAKsgCAAAVZAEAgAqyAABABVkAAKCCLAAAUEEWAACoIAsAAFSQ
BQAAKsgCAAAVZAEAgAqyAABABVkAAKCCLAAAUEEWAACoIAsAAFSQBQAAKsgCAAAVZAEAgAqyAABA
BVkAAKCCLAAAUEEWAACoIAsAAFSQBQAAKsgCAAAVZAEAgAqyAABABVkAAKCCLAAAUEEWAACoIAsA
AFSQBQAAKsgCAAAVZAEAgAqyAABABVkAAKCCLAAAUEEWAACoIAsAAFSQBQAAKsgCAAAVZAEAgAqy
AABABVkAAKCCLAAAUEEWAACoIAsAAFSQBQAAKsgCAAAVZAEAgAqyAABABVkAAKCCLAAAUEEWAACo
IAsAAFSQBQAAKsgCAAAVZAEAgAqyAABABVkAAKCCLAAAUEEWAACoIAsAAFSQBQAAKsgCAAAVZAEA
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
Lh4wABiL8oXshQsX4syZM8X7ZXPv52XMLQD5AcqbUt6c8ssBADBW5We189uRZwLqacwtACNGb1AA
MJaVzbmftzG7AAAAPzsLAABUkAUAACrIAgAAFWQBAIAKsgAAQAVZAACggiwAAFBBFgAAqCALAABU
kAUAACrIAgAAFWQBAIAKsgAAQAVZAACggiwAAFBBFgAAqCALAABUkAUAACrIAgAAFWQBAIAKsgAA
QAVZAACggr70BWAgLQBnhq8fGAD4xZRn9YGjX9IC0JsO0j90Kg6mA+atAgD4xZRndb5oz7P7Cy8A
IwfI2wQA8IttZPh/KQsAADD21LwA7E8LQO/gmeKOAMDYtCU5eKcLwH3337/53NWIw2ej2BoAgLEp
D//LEfHTSZM/fwH4z1//+pYJE9+K116fWGwMAMDY9dNJb8e9997/+QuAJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSdJf6pV/6/wE1luVv897dlAAAAABJ
RU5ErkJggg==</Preview>
  <Form>bgMg1kFKCBIAACODCAAAAAAABADVV1tvozoQfq/U/4B4bbQQckVqIwG5tWkuBEI3+7Ii4IIbgxMuTdJfvzak
Z9NCAz1Sj3oSybHNDDPzfTNj53q6egJWFHYuLxjmOl0w0WEDbljtEEbA+/EAfRvvwh99HHjpWGHy
HlUYAwQhxP5N/QdPvxVGiVEUB+DGB3EUmKjCzOIVgtYIHHS8Bv7NqtUyG1ajWRVrdcC3RZbxTY9Y
fiTvq7KM5UJkB0SOVbAfBRiFbOImcXQW4A0IosNRQYojrFkmAl3oAZ86QUSbFaZau+ZeRYtUx9gG
bKdPLBXqKAgCP9LgC1FoVYUKUxfEQqUJGdlOElqhrBaZQTTDIYxIKGxHIdZAoFkBAH6hrg72EY0j
8LKivWfypqPcPTbtoz+/6fyaS56+ihanwhxaLjUm4/2XZ0RAbEXE1grvzyZGFo57bJkpijWSEILY
yKDyEVWnNksopenQrJF0EJsl5HVzdevbYM92qq0y4gmtWUq5lKjytMlxFGH/6xkDjwEI3Q3CUfhv
GWvS2hKqn6DsxGhpytptYiTbKM4yVorghLF56hIzK+nTIgQGDGMTadEBAdm01gpGOGA7ehCDPP3T
miaNyVq/heF3sveuuD+dNGPgx1oUwM2X5w3p33FILekuIJR+KnNuPdMBtJlD30m5FYgnAl8C9lsS
08mbiQDdOQeJjjFKIKHYUOGvg+bELeIYyShAALHA0fWIApXxhmW402g4uvc3+mJA/lYh8bgMgmkF
vqWvhNrMtG1CF9tpEKaIJTKWqVwX72hENGwdbsKPyyO35JNDW2h/rubrpWv+HxByTvrT0nu7KK7C
/zDlzufWR3cpBB2fBE/bHnTc4otUlyy7eOe/q75vWnuZyrPNYH228N6X3f8kLkTJKx9YIc1JXz6h
V4a+GRw60JCn8x0/GjhYIp+JtnB7C4fMZLqUVEVa0t/HNie6dCIPbFlf9CTpfjBTuL0rq3QX7bQ+
erm8INPpMxm6wU5Gq/1Bo09ll58bLr8QRM8e2q7lLSRr0N+sfDVeeQZ/21XjsVav/urZy8TyaHM3
7/UXlxfTnvh0NeO4Gb9YqltJvmpuot4Vv508t6X6s6hyY+HK9ELOkPF0LB12W/FlC7fqXb9ldkdr
qyqNnn4NlhEcDuH95cXEXMoP8k+4h85gOtHDZvjgKXJ74KLxsCZJTuMlFOaqvpsKajdU1g4coa00
MIA1erJrS7EvGY3wZ4u3e0uH+DY/jG+lHr+ewb6xCo2xpsgSUgbGgyC4h6fexJEGQwHxuqMOW9Je
bS1mOxtNoMP7BOS63Obu2rI0uqtOJop5edFc8S8J3j3U19darHqKcs0dKSpJcNr785tF8Z+dpCXT
e7OQbbGZBps2/LTP5p0x37+n5neNs8jmqpQEttqgyGYP1fyjq0ssnf/feLxj5rqUvWx+fzo+aHZn
+cjX+RJC7vMP0hxG8p06S8nrNOz8ATYUAPsIEgAA</Form>
  <Code><![CDATA[
$form1_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $form1 -Theme Dark
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $form1 -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $form1 -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-ToolStripComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ToolStripComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ToolStripComboBox control.
	
	.PARAMETER ToolStripComboBox
		The ToolStripComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ToolStripComboBox's Items collection.
	
	.PARAMETER Append
		Adds the item(s) to the ToolStripComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "White" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "Blue" -Append
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ToolStripComboBox]
		$ToolStripComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ToolStripComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ToolStripComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ToolStripComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ToolStripComboBox.Items.Add($obj)
		}
		$ToolStripComboBox.EndUpdate()
	}
	else
	{
		$ToolStripComboBox.Items.Add($Items)
	}
}


#endregion

$text = $buttonTest.Text
$refreshplots_Click={
	#TODO: Place custom script here
	$richtextbox1.Text = Get-Content -Path 'D:\Redstone\plotcheck.csv' | Out-String
	
}

$listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>